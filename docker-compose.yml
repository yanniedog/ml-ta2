version: '3.8'

services:
  # Main ML-TA Application
  ml-ta:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
      - "9090:9090"
    environment:
      - ML_TA_ENV=development
      - DATABASE_URL=postgresql://mlta:password@postgres:5432/mlta_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./artefacts:/app/artefacts
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - ml-ta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=mlta_db
      - POSTGRES_USER=mlta
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/docker/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ml-ta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlta -d mlta_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ml-ta-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ml-ta-network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ml-ta-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Jupyter Notebook for Analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root
    ports:
      - "8888:8888"
    environment:
      - ML_TA_ENV=development
    volumes:
      - ./:/app
      - ./notebooks:/app/notebooks
    networks:
      - ml-ta-network
    restart: unless-stopped

  # Worker for Background Tasks
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    command: python -m src.worker
    environment:
      - ML_TA_ENV=development
      - DATABASE_URL=postgresql://mlta:password@postgres:5432/mlta_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./logs:/app/logs
      - ./artefacts:/app/artefacts
    depends_on:
      - postgres
      - redis
    networks:
      - ml-ta-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ml-ta-network:
    driver: bridge
