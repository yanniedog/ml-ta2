"""
Comprehensive test suite for Phase 4: Model Training system.

This test suite validates:
- Model training functionality with multiple algorithms
- Model validation and cross-validation
- Performance metrics calculation
- Model persistence and loading
- Feature importance analysis
- Integration with existing feature engineering pipeline
"""

import sys
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

def test_model_training_basic():
    """Test basic model training functionality."""
    print("\nü§ñ Testing Basic Model Training...")
    
    try:
        from src.models import create_model_trainer, ModelConfig
        from src.model_validation import create_model_validator
        
        # Generate test data
        np.random.seed(42)
        n_samples = 200
        
        # Create realistic financial features
        test_data = pd.DataFrame({
            'close_price': 50000 + np.cumsum(np.random.randn(n_samples) * 100),
            'volume': np.random.lognormal(8, 1, n_samples),
            'sma_20': np.random.uniform(49000, 51000, n_samples),
            'rsi_14': np.random.uniform(20, 80, n_samples),
            'bb_position': np.random.uniform(0, 1, n_samples),
            'price_momentum': np.random.uniform(0.95, 1.05, n_samples),
            'volume_ratio': np.random.uniform(0.5, 2.0, n_samples)
        })
        
        # Create classification target (price direction)
        test_data['target'] = (test_data['close_price'].pct_change() > 0).astype(int)
        
        # Remove first row with NaN
        test_data = test_data.dropna()
        
        X = test_data.drop(['target', 'close_price'], axis=1)
        y = test_data['target']
        
        print(f"  üìä Generated {len(test_data)} samples with {len(X.columns)} features")
        
        # Test classification model training
        trainer = create_model_trainer(task_type='classification', model_type='random_forest')
        assert trainer is not None, "Model trainer should be created"
        print("  ‚úÖ Model trainer created successfully")
        
        # Train model
        model, metrics = trainer.train_model(X, y, "test_model")
        assert model is not None, "Model should be trained"
        assert metrics is not None, "Metrics should be calculated"
        print(f"  ‚úÖ Model trained successfully (accuracy: {metrics.accuracy:.3f})")
        
        # Test predictions
        predictions = trainer.predict("test_model", X.head(10))
        assert len(predictions) == 10, "Should predict for all samples"
        assert all(pred in [0, 1] for pred in predictions), "Classification predictions should be 0 or 1"
        print("  ‚úÖ Model predictions working")
        
        # Test model metrics
        model_metrics = trainer.get_model_metrics("test_model")
        assert model_metrics is not None, "Should return model metrics"
        assert model_metrics.accuracy is not None, "Accuracy should be calculated"
        assert 0 <= model_metrics.accuracy <= 1, "Accuracy should be between 0 and 1"
        print("  ‚úÖ Model metrics calculation working")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Basic model training test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_model_validation_system():
    """Test model validation and cross-validation system."""
    print("\nüìä Testing Model Validation System...")
    
    try:
        from src.models import create_model_trainer
        from src.model_validation import create_model_validator
        
        # Generate test data
        np.random.seed(42)
        n_samples = 150
        
        test_data = pd.DataFrame({
            'feature_1': np.random.randn(n_samples),
            'feature_2': np.random.randn(n_samples),
            'feature_3': np.random.uniform(0, 1, n_samples),
            'feature_4': np.random.exponential(1, n_samples),
            'feature_5': np.random.normal(0, 2, n_samples)
        })
        
        # Create target with some signal
        test_data['target'] = (
            (test_data['feature_1'] > 0) & 
            (test_data['feature_2'] > test_data['feature_3'])
        ).astype(int)
        
        X = test_data.drop('target', axis=1)
        y = test_data['target']
        
        print(f"  üìä Generated validation data: {len(test_data)} samples, {len(X.columns)} features")
        
        # Create trainer and validator
        trainer = create_model_trainer(task_type='classification', model_type='random_forest')
        validator = create_model_validator(cv_folds=3, test_size=0.3)
        
        # Train model
        model, metrics = trainer.train_model(X, y, "validation_test")
        print("  ‚úÖ Model trained for validation")
        
        # Perform comprehensive validation
        validation_results = validator.validate_model(trainer, X, y, "validation_test")
        assert validation_results is not None, "Validation results should be returned"
        assert 'performance_summary' in validation_results, "Should include performance summary"
        assert 'cross_validation' in validation_results, "Should include cross-validation results"
        assert 'holdout_validation' in validation_results, "Should include holdout validation"
        print("  ‚úÖ Model validation completed")
        
        # Check validation components
        perf_summary = validation_results['performance_summary']
        assert 'model_name' in perf_summary, "Performance summary should include model name"
        assert 'cv_score' in perf_summary or 'error' in validation_results['cross_validation'], "Should have CV score or error"
        print("  ‚úÖ Validation components working")
        
        # Test feature analysis
        feature_analysis = validation_results.get('feature_analysis', {})
        if 'feature_importance' in feature_analysis:
            importance = feature_analysis['feature_importance']
            assert len(importance) == len(X.columns), "Should have importance for all features"
            assert all(isinstance(v, (int, float)) for v in importance.values()), "Importance values should be numeric"
            print("  ‚úÖ Feature importance analysis working")
        
        # Generate validation report
        report = validator.generate_validation_report("validation_test")
        assert report is not None, "Validation report should be generated"
        assert 'model_info' in report, "Report should include model info"
        assert 'performance' in report, "Report should include performance metrics"
        print("  ‚úÖ Validation report generation working")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Model validation test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_multiple_model_types():
    """Test training with different model types."""
    print("\nüîÑ Testing Multiple Model Types...")
    
    try:
        from src.models import create_model_trainer
        
        # Generate test data
        np.random.seed(42)
        n_samples = 100
        
        X = pd.DataFrame({
            'feature_1': np.random.randn(n_samples),
            'feature_2': np.random.randn(n_samples),
            'feature_3': np.random.uniform(0, 1, n_samples)
        })
        
        y_class = (X['feature_1'] + X['feature_2'] > 0).astype(int)
        y_reg = X['feature_1'] * 2 + X['feature_2'] + np.random.randn(n_samples) * 0.1
        
        print(f"  üìä Generated test data: {len(X)} samples, {len(X.columns)} features")
        
        # Test different model types for classification
        classification_models = ['random_forest', 'gradient_boosting', 'logistic_regression']
        
        for model_type in classification_models:
            try:
                trainer = create_model_trainer(task_type='classification', model_type=model_type)
                model, metrics = trainer.train_model(X, y_class, f"test_{model_type}")
                
                assert model is not None, f"Model {model_type} should be trained"
                assert metrics.accuracy is not None, f"Accuracy should be calculated for {model_type}"
                
                # Test predictions
                predictions = trainer.predict(f"test_{model_type}", X.head(5))
                assert len(predictions) == 5, f"Should predict for all samples with {model_type}"
                
                print(f"  ‚úÖ {model_type} classification working (accuracy: {metrics.accuracy:.3f})")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  {model_type} classification failed: {e}")
        
        # Test regression models
        regression_models = ['random_forest', 'linear_regression', 'ridge']
        
        for model_type in regression_models:
            try:
                trainer = create_model_trainer(task_type='regression', model_type=model_type)
                model, metrics = trainer.train_model(X, y_reg, f"test_reg_{model_type}")
                
                assert model is not None, f"Regression model {model_type} should be trained"
                assert metrics.r2_score is not None, f"R2 score should be calculated for {model_type}"
                
                # Test predictions
                predictions = trainer.predict(f"test_reg_{model_type}", X.head(5))
                assert len(predictions) == 5, f"Should predict for all samples with {model_type}"
                
                print(f"  ‚úÖ {model_type} regression working (R2: {metrics.r2_score:.3f})")
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è  {model_type} regression failed: {e}")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Multiple model types test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_model_persistence():
    """Test model saving and loading functionality."""
    print("\nüíæ Testing Model Persistence...")
    
    try:
        from src.models import create_model_trainer
        import tempfile
        import os
        
        # Generate test data
        np.random.seed(42)
        n_samples = 80
        
        X = pd.DataFrame({
            'feature_1': np.random.randn(n_samples),
            'feature_2': np.random.randn(n_samples)
        })
        y = (X['feature_1'] > 0).astype(int)
        
        # Train model
        trainer = create_model_trainer(task_type='classification', model_type='random_forest')
        model, metrics = trainer.train_model(X, y, "persistence_test")
        
        original_accuracy = metrics.accuracy
        print(f"  üìä Original model accuracy: {original_accuracy:.3f}")
        
        # Test model saving
        with tempfile.TemporaryDirectory() as temp_dir:
            model_path = os.path.join(temp_dir, "test_model.pkl")
            
            trainer.save_model("persistence_test", model_path)
            assert os.path.exists(model_path), "Model file should be created"
            print("  ‚úÖ Model saved successfully")
            
            # Create new trainer and load model
            new_trainer = create_model_trainer(task_type='classification', model_type='random_forest')
            new_trainer.load_model("loaded_model", model_path)
            
            assert "loaded_model" in new_trainer.models, "Model should be loaded"
            print("  ‚úÖ Model loaded successfully")
            
            # Test predictions with loaded model
            original_predictions = trainer.predict("persistence_test", X.head(10))
            loaded_predictions = new_trainer.predict("loaded_model", X.head(10))
            
            # Predictions should be identical
            assert np.array_equal(original_predictions, loaded_predictions), "Loaded model predictions should match original"
            print("  ‚úÖ Loaded model predictions match original")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Model persistence test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_integration_with_features():
    """Test integration with existing feature engineering pipeline."""
    print("\nüîó Testing Integration with Feature Engineering...")
    
    try:
        from src.models import create_model_trainer
        from src.features import create_feature_pipeline
        from src.indicators import create_indicators_calculator
        
        # Generate realistic OHLCV data
        np.random.seed(42)
        n_samples = 120
        
        base_price = 50000
        price_changes = np.random.randn(n_samples) * 100
        close_prices = base_price + np.cumsum(price_changes)
        
        raw_data = pd.DataFrame({
            'timestamp': pd.date_range('2023-01-01', periods=n_samples, freq='h'),
            'symbol': 'BTCUSDT',
            'open': close_prices * (1 + np.random.normal(0, 0.001, n_samples)),
            'high': close_prices * (1 + np.abs(np.random.normal(0, 0.005, n_samples))),
            'low': close_prices * (1 - np.abs(np.random.normal(0, 0.005, n_samples))),
            'close': close_prices,
            'volume': np.random.lognormal(8, 1, n_samples)
        })
        
        # Ensure OHLC relationships
        raw_data['high'] = raw_data[['open', 'high', 'close']].max(axis=1)
        raw_data['low'] = raw_data[['open', 'low', 'close']].min(axis=1)
        
        print(f"  üìä Generated {len(raw_data)} samples of OHLCV data")
        
        # Create indicators
        indicators_calc = create_indicators_calculator()
        data_with_indicators = indicators_calc.calculate_all_indicators(raw_data)
        
        # Create features
        feature_pipeline = create_feature_pipeline()
        featured_data = feature_pipeline.create_features(data_with_indicators)
        
        # Remove rows with NaN values (from indicators/features)
        featured_data = featured_data.dropna()
        
        print(f"  üìä After feature engineering: {len(featured_data)} samples, {len(featured_data.columns)} columns")
        
        # Create target (price direction prediction)
        featured_data['target'] = (featured_data['close'].pct_change().shift(-1) > 0).astype(int)
        featured_data = featured_data.dropna()
        
        # Select features for training (exclude timestamp, symbol, OHLCV, target)
        exclude_cols = ['timestamp', 'symbol', 'open', 'high', 'low', 'close', 'volume', 'target']
        feature_cols = [col for col in featured_data.columns if col not in exclude_cols]
        
        X = featured_data[feature_cols]
        y = featured_data['target']
        
        print(f"  üìä Training data: {len(X)} samples, {len(X.columns)} features")
        assert len(X.columns) >= 10, "Should have at least 10 engineered features"
        
        # Train model with engineered features
        trainer = create_model_trainer(task_type='classification', model_type='random_forest')
        model, metrics = trainer.train_model(X, y, "integration_test")
        
        assert metrics.accuracy is not None, "Model should train successfully with engineered features"
        print(f"  ‚úÖ Model trained with engineered features (accuracy: {metrics.accuracy:.3f})")
        
        # Test predictions
        predictions = trainer.predict("integration_test", X.head(5))
        assert len(predictions) == 5, "Should make predictions with engineered features"
        print("  ‚úÖ Predictions working with engineered features")
        
        # Verify no data leakage (target should be properly shifted)
        assert not featured_data['target'].iloc[-1] == featured_data['target'].iloc[-1], "Last target should be NaN (no future data)"
        print("  ‚úÖ No data leakage confirmed")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Integration test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_performance_requirements():
    """Test that model training meets performance requirements."""
    print("\n‚ö° Testing Performance Requirements...")
    
    try:
        from src.models import create_model_trainer
        import time
        
        # Generate larger dataset for performance testing
        np.random.seed(42)
        n_samples = 1000
        n_features = 20
        
        X = pd.DataFrame(
            np.random.randn(n_samples, n_features),
            columns=[f'feature_{i}' for i in range(n_features)]
        )
        y = (X.iloc[:, 0] + X.iloc[:, 1] > 0).astype(int)
        
        print(f"  üìä Performance test data: {n_samples} samples, {n_features} features")
        
        # Test training time
        trainer = create_model_trainer(task_type='classification', model_type='random_forest')
        
        start_time = time.time()
        model, metrics = trainer.train_model(X, y, "performance_test")
        training_time = time.time() - start_time
        
        print(f"  ‚è±Ô∏è  Training time: {training_time:.3f}s")
        assert training_time < 30, "Training should complete within 30 seconds"
        print("  ‚úÖ Training time requirement met")
        
        # Test prediction time
        start_time = time.time()
        predictions = trainer.predict("performance_test", X.head(100))
        prediction_time = time.time() - start_time
        
        print(f"  ‚è±Ô∏è  Prediction time (100 samples): {prediction_time:.3f}s")
        assert prediction_time < 1, "Predictions should be fast (<1s for 100 samples)"
        print("  ‚úÖ Prediction time requirement met")
        
        # Test memory usage (basic check)
        import psutil
        import os
        
        process = psutil.Process(os.getpid())
        memory_mb = process.memory_info().rss / 1024 / 1024
        
        print(f"  üíæ Memory usage: {memory_mb:.1f} MB")
        assert memory_mb < 1000, "Memory usage should be reasonable (<1GB)"
        print("  ‚úÖ Memory usage requirement met")
        
        # Test model accuracy
        assert metrics.accuracy > 0.5, "Model should perform better than random"
        print(f"  üéØ Model accuracy: {metrics.accuracy:.3f} (>0.5 required)")
        print("  ‚úÖ Accuracy requirement met")
        
        return True
        
    except Exception as e:
        print(f"  ‚ùå Performance requirements test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """Run comprehensive Phase 4 model training test suite."""
    print("ü§ñ Phase 4: Model Training - Comprehensive Test Suite")
    print("=" * 70)
    
    tests = [
        ("Basic Model Training", test_model_training_basic),
        ("Model Validation System", test_model_validation_system),
        ("Multiple Model Types", test_multiple_model_types),
        ("Model Persistence", test_model_persistence),
        ("Integration with Features", test_integration_with_features),
        ("Performance Requirements", test_performance_requirements)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            failed += 1
    
    print("\n" + "=" * 70)
    print(f"üß™ PHASE 4 TEST SUMMARY: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ ALL PHASE 4 TESTS PASSED!")
        print("‚úÖ Model training system working")
        print("‚úÖ Model validation framework functional")
        print("‚úÖ Multiple model types supported")
        print("‚úÖ Model persistence working")
        print("‚úÖ Integration with feature engineering confirmed")
        print("‚úÖ Performance requirements met")
        print("\nüìã PHASE 4 QUALITY GATE: PASSED")
        print("üöÄ Model training system ready for production")
    else:
        print("‚ùå Some Phase 4 tests failed - Issues need resolution")
        print("‚ùå Phase 4 Quality Gate: FAILED")
    
    return failed == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
