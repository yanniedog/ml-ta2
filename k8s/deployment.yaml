apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-ta-api
  namespace: ml-ta
  labels:
    app: ml-ta-api
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: ml-ta-api
  template:
    metadata:
      labels:
        app: ml-ta-api
        version: v1
    spec:
      serviceAccountName: ml-ta-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-ta-api
        image: ml-ta:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: LOG_LEVEL
          value: "INFO"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ml-ta-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: ml-ta-secrets
              key: redis-url
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ml-ta-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: data-volume
          mountPath: /app/data
        - name: models-volume
          mountPath: /app/models
        - name: logs-volume
          mountPath: /app/logs
      volumes:
      - name: config-volume
        configMap:
          name: ml-ta-config
      - name: data-volume
        persistentVolumeClaim:
          claimName: ml-ta-data-pvc
      - name: models-volume
        persistentVolumeClaim:
          claimName: ml-ta-models-pvc
      - name: logs-volume
        persistentVolumeClaim:
          claimName: ml-ta-logs-pvc
      nodeSelector:
        workload-type: ml-ta
      tolerations:
      - key: "ml-ta"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-ta-worker
  namespace: ml-ta
  labels:
    app: ml-ta-worker
    version: v1
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ml-ta-worker
  template:
    metadata:
      labels:
        app: ml-ta-worker
        version: v1
    spec:
      serviceAccountName: ml-ta-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-ta-worker
        image: ml-ta:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "src.worker"]
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: WORKER_TYPE
          value: "prediction"
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: ml-ta-secrets
              key: redis-url
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /app/models
          readOnly: true
        - name: data-volume
          mountPath: /app/data
      volumes:
      - name: config-volume
        configMap:
          name: ml-ta-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: ml-ta-models-pvc
      - name: data-volume
        persistentVolumeClaim:
          claimName: ml-ta-data-pvc
      nodeSelector:
        workload-type: ml-ta
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-ta-scheduler
  namespace: ml-ta
  labels:
    app: ml-ta-scheduler
    version: v1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ml-ta-scheduler
  template:
    metadata:
      labels:
        app: ml-ta-scheduler
        version: v1
    spec:
      serviceAccountName: ml-ta-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: ml-ta-scheduler
        image: ml-ta:latest
        imagePullPolicy: IfNotPresent
        command: ["python", "-m", "src.scheduler"]
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: SCHEDULER_TYPE
          value: "training"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: ml-ta-secrets
              key: database-url
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: models-volume
          mountPath: /app/models
        - name: data-volume
          mountPath: /app/data
      volumes:
      - name: config-volume
        configMap:
          name: ml-ta-config
      - name: models-volume
        persistentVolumeClaim:
          claimName: ml-ta-models-pvc
      - name: data-volume
        persistentVolumeClaim:
          claimName: ml-ta-data-pvc
      nodeSelector:
        workload-type: ml-ta
